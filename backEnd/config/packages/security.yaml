security:
    password_hashers:
        App\Entity\User:
            algorithm: auto

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        # Désactive la sécurité sur les outils de debug
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # Point d’entrée pour le login JWT
        login:
            pattern: ^/api/login_check
            stateless: true
            json_login:
                check_path: /api/login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # Firewall principal pour toutes les routes de l’API
        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            jwt: ~

    access_control:
        - { path: ^/api$, roles: PUBLIC_ACCESS, methods: [GET] } # autorise juste la page /api
        - { path: ^/api/docs, roles: PUBLIC_ACCESS, methods: [GET] } # selon ta version d’API Platform
        - { path: ^/api/photos, roles: PUBLIC_ACCESS, methods: [GET] }
        # Autoriser la création d'utilisateurs sans token
        - { path: ^/api/users, roles: PUBLIC_ACCESS, methods: [POST] }
        - { path: ^/api/users, roles: PUBLIC_ACCESS, methods: [GET] }
        # Autoriser tout le monde à se connecter
        - { path: ^/api/login_check, roles: PUBLIC_ACCESS }
        # Tout le reste de /api nécessite d’être authentifié
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            App\Entity\User:
                algorithm: auto
                cost: 4
                time_cost: 3
                memory_cost: 10
